"""
Django settings for opencabs project.
Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import json
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    'SECRET_KEY', '3n&=-gv4u1i*8&kxnm=j-z1yg6@$rpc!&%-6==-4$@$5#&rymc')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
if os.environ.get('DEBUG', '').lower() == 'false':
    DEBUG = False

ALLOWED_HOSTS = json.loads(os.environ.get('ALLOWED_HOSTS', '[]'))

SITE_ID = int(os.environ.get('SITE_ID', '1'))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': [],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'debugger': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        }
    }
}


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',

    'logentry_admin',

    'debug_toolbar',
    'formtools',
    'import_export',
    'djmoney',
    'anymail',
    'djangoql',

    'opencabs',
    'finance'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'opencabs.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates'),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'opencabs.context_processors.settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'opencabs.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = os.environ.get('TIME_ZONE', 'UTC')

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.environ.get('STATIC_ROOT', "")
STATICFILES_DIRS = [
    item for item in os.environ.get('STATICFILES_DIRS', '').split(',')
    if item.strip()] or [
    os.path.join(BASE_DIR, 'static')]

MEDIA_ROOT = os.environ.get('MEDIA_ROOT', os.path.join(BASE_DIR, 'media'))
MEDIA_URL = '/media/'

BOOTSTRAP3 = {
    'set_required': False,  # For Django <= 1.8 only
    'error_css_class': 'bootstrap3-error',
    'required_css_class': 'bootstrap3-required',
    'javascript_in_head': True,
}

INTERNAL_IPS = [
    '127.0.0.1',
]

# Opencabs
URL_PREFIX = os.environ.get('URL_PREFIX', "")
PROJECT_NAME = os.environ.get('PROJECT_NAME', 'Opencabs')
PROJECT_HEADER = os.environ.get('PROJECT_HEADER', 'Book your travel!')
PROJECT_DESCRIPTION = os.environ.get('PROJECT_DESCRIPTION', '')
HEADER_IMAGE = os.environ.get('HEADER_IMAGE', '/static/img/header.jpg')
BOOKING_ID_PREFIX = os.environ.get('PNR_PREFIX', 'OC')
BOOKING_RESOURCE_CLASS = os.environ.get('BOOKING_RESOURCE_CLASS', 'opencabs.admin.BookingResource')
ROUTE_CODE_FUNC = lambda a, b: '%s-%s' % (a, b) if a > b else '%s-%s' % (b, a)
CONTACT_PHONE = os.environ.get('CONTACT_PHONE', '123-456-6789')
CONTACT_EMAIL = os.environ.get('CONTACT_EMAIL', 'your-email@your-domain.com')
MSG91_AUTHKEY = os.environ.get('MSG91_AUTHKEY',
                               'xxxxxxxxxxxxxxxxxxxxxxxxxxxxx')
MSG91_SENDER_ID = os.environ.get('MSG91_SENDER_ID', 'SOMEID')
MSG91_ROUTE_ID = os.environ.get('MSG91_ROUTE_ID', 4)

EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND',
                               'anymail.backends.mailgun.EmailBackend')
FROM_EMAIL = os.environ.get('FROM_EMAIL', 'noreply@opencabs.org')
MAILGUN_ACCESS_KEY = os.environ.get('MAILGUN_ACCESS_KEY', '')
MAILGUN_SERVER_NAME = os.environ.get('MAILGUN_SERVER_NAME', '')

ANYMAIL = {
    "MAILGUN_API_KEY": os.environ.get("MAILGUN_ACCESS_KEY", ''),
    "MAILGUN_SENDER_DOMAIN": os.environ.get("MAILGUN_SERVER_NAME", ''),
    "MAILGUN_API_URL": os.environ.get("MAILGUN_API_URL", "https://api.mailgun.net/v3"),
}


INVOICE_ID_PREFIX = os.environ.get('INVOICE_ID_PREFIX', 'OCV')

TAXABLE_FIELD = 'price'
TAXES = {
    'CGST': {
        'rate': float(os.environ.get('TAXES_CGST_RATE', 0.05)),
        'label': os.environ.get('TAXES_CGST_LABEL', 'CGST')
    },
    'SGST': {
        'rate': float(os.environ.get('TAXES_SGST_RATE', 0.05)),
        'label': os.environ.get('TAXES_SGST_LABEL', 'SGST')
    }
}
EXTRA_TAXES_FROM_DATETIME = os.environ.get(
    'EXTRA_TAXES_FROM_DATETIME', '2017-11-04 00:00:00')

DATETIME_STR_FORMAT = '%Y-%m-%d %H:%M:%S'

# Invoice
INVOICE_BUSINESS_NAME = os.environ.get('INVOICE_BUSINESS_NAME', "Opencabs")

INVOICE_BUSINESS_ADDRESS = os.environ.get('INVOICE_BUSINESS_ADDRESS',  """
COMPANY NAME LTD
STREET
TOWN
COUNTY
POSTCODE
COUNTRY

Phone: +00 (0) 000 000 000
Email: example@example.com
Website: www.example.com
Reg No: 00000000""")

INVOICE_FOOTER = os.environ.get('INVOICE_FOOTER', """
Bank Details: Street address, Town, County, POSTCODE
Sort Code: 00-00-00 Account No: 00000000 (Quote invoice number).
Please pay via bank transfer or cheque. All payments should be made in CURRENCY.
Make cheques payable to Company Name Ltd.""")

# Notifications
SEND_CUSTOMER_SMS = os.environ.get('SEND_CUSTOMER_SMS', 'True').lower() == 'true'
SEND_DRIVER_SMS = os.environ.get('SEND_DRIVER_SMS', 'True').lower() == 'true'

PAYMENT_PROVIDER = os.environ.get('PAYMENT_PROVIDER', 'ccavenue')

PAYMENT_PROVIDERS = {
    'ccavenue': {
        'CLASS': 'finance.gateways.ccavenue.CCAvenue',
        'PROJECT_NAME': os.environ.get('PROJECT_NAME', PROJECT_NAME),
        'GATEWAY_BASE_URL': os.environ.get('CCAVENUE_GATEWAY_BASE_URL', 'http://test.ccavenue.com'),
        'MERCHANT_ID': os.environ.get('CCAVENUE_MERCHANT_ID', ''),
        'ACCESS_CODE': os.environ.get('CCAVENUE_ACCESS_CODE', ''),
        'WORKING_KEY': os.environ.get('CCAVENUE_WORKING_KEY', ''),
        'REDIRECT_URL': os.environ.get('CCAVENUE_REDIRECT_URL', ''),
        'CANCEL_URL': os.environ.get('CCACENUE_CANCEL_URL', ''),
        'LANGUAGE': os.environ.get('CCAVENUE_LANGUAGE', 'en'),
        'BILLING_DETAILS': {
            'NAME': os.environ.get('CCAVENUE_BILLING_NAME', ''),
            'ADDRESS': os.environ.get('CCAVENUE_BILLING_ADDRESS', ''),
            'CITY': os.environ.get('CCAVENUE_BILLING_CITY', ''),
            'STATE': os.environ.get('CCAVENUE_BILLING_STATE', ''),
            'ZIP': os.environ.get('CCAVENUE_BILLING_ZIP', ''),
            'COUNTRY': os.environ.get('CCAVENUE_BILLING_COUNTRY', ''),
            'TEL': os.environ.get('CCAVENUE_BILLING_TEL', ''),
            'EMAIL': os.environ.get('CCAVENUE_BILLING_EMAIL', ''),
        },
    }
}
